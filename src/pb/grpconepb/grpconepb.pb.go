// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpconepb.proto

/*
Package grpconepb is a generated protocol buffer package.

It is generated from these files:
	grpconepb.proto

It has these top-level messages:
	Say
	Response
*/
package grpconepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Say struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Say) Reset()                    { *m = Say{} }
func (m *Say) String() string            { return proto.CompactTextString(m) }
func (*Say) ProtoMessage()               {}
func (*Say) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Say) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Say) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Response struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*Say)(nil), "grpconepb.Say")
	proto.RegisterType((*Response)(nil), "grpconepb.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpconepb service

type GrpconepbClient interface {
	SayHi(ctx context.Context, in *Say, opts ...grpc.CallOption) (*Response, error)
}

type grpconepbClient struct {
	cc *grpc.ClientConn
}

func NewGrpconepbClient(cc *grpc.ClientConn) GrpconepbClient {
	return &grpconepbClient{cc}
}

func (c *grpconepbClient) SayHi(ctx context.Context, in *Say, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/grpconepb.grpconepb/SayHi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpconepb service

type GrpconepbServer interface {
	SayHi(context.Context, *Say) (*Response, error)
}

func RegisterGrpconepbServer(s *grpc.Server, srv GrpconepbServer) {
	s.RegisterService(&_Grpconepb_serviceDesc, srv)
}

func _Grpconepb_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Say)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpconepbServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpconepb.grpconepb/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpconepbServer).SayHi(ctx, req.(*Say))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpconepb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpconepb.grpconepb",
	HandlerType: (*GrpconepbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _Grpconepb_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpconepb.proto",
}

func init() { proto.RegisterFile("grpconepb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2f, 0x2a, 0x48,
	0xce, 0xcf, 0x4b, 0x2d, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x69, 0x73, 0x31, 0x07, 0x27, 0x56, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0x02, 0x5c, 0xcc, 0xb9, 0xc5, 0xe9, 0x12, 0x4c,
	0x60, 0x21, 0x10, 0x53, 0x49, 0x8e, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15,
	0xa4, 0x23, 0x29, 0x3f, 0xa5, 0x12, 0xa6, 0x03, 0xc4, 0x36, 0xb2, 0xe4, 0x42, 0x98, 0x2c, 0xa4,
	0xc3, 0xc5, 0x1a, 0x9c, 0x58, 0xe9, 0x91, 0x29, 0xc4, 0xa7, 0x87, 0xb0, 0x3f, 0x38, 0xb1, 0x52,
	0x4a, 0x18, 0x89, 0x0f, 0x33, 0x2e, 0x89, 0x0d, 0xec, 0x32, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4d, 0x35, 0x52, 0x58, 0xac, 0x00, 0x00, 0x00,
}
